module Test where 

import Daml.Script
import Inventory
import DA.Optional (fromSome)
-- import Setup

testWorkFlow : Script ()
testWorkFlow = script do
  -- manufacturer <- allocateParty "Manufacturer"
  ultaSupplier <- allocateParty "UltaSupplier"
  sephoraSupplier <- allocateParty "SephoraSupplier"
  customer <- allocateParty "Customer"


-- ulta and sephora create some product contracts
  ultaProd1 <- submit ultaSupplier do
    createCmd Inventory.Product with
      -- manufacturer = manufacturer
      supplier = ultaSupplier
      productInfo = ProductInfo with
        productId = "UltaP123"
        productName = "Ulta Mascara"
        quantity = 50
        price = 100.0

  sephoraProd1 <- submit sephoraSupplier do
    createCmd Product with
      -- manufacturer = manufacturer
      supplier = sephoraSupplier
      productInfo = ProductInfo with 
        productId = "SephoraP456"
        productName = "Sephora Lip Kit"
        quantity = 30
        price = 150.0

--suppliers can change price and stock 
  maybeNewUltaProd1 <- submit ultaSupplier do 
    exerciseCmd ultaProd1 UpdatePrice with newPrice = 75.0
  let newUltaProd1 = fromSome maybeNewUltaProd1

  _ <- submit ultaSupplier do 
    exerciseCmd newUltaProd1 UpdateStock with stockChange = 75

--customer creates order contract request
  oid1 <- submit customer do
    createCmd Order with
      customer
      supplier = ultaSupplier
      orderId = "Order001"
      productsOrdered = [("UltaP123", 2)]
--supplier accept order 
  _ <- submit ultaSupplier do
    exerciseCmd oid1 AcceptOrder

  oid2 <- submit customer do
    createCmd Order with
      customer
      supplier = sephoraSupplier
      orderId = "Order002"
      productsOrdered = [("SephoraP456", 1)]

  _ <- submit sephoraSupplier do
    exerciseCmd oid2 AcceptOrder

  oid3 <- submit customer do
    createCmd Order with
      customer
      supplier = sephoraSupplier
      orderId = "Order003"
      productsOrdered = [("SephoraP456", 1)]

  _ <- submit customer do 
    exerciseCmd oid3 CancelOrder -- customer cancels order before supplier accepts it

-- submitMustFail - UnHappy Paths
--customer accepting their own order
  submitMustFail customer do
    exerciseCmd oid1 AcceptOrder

-- customer attempts to cancel an order after it has been accepted
  submitMustFail customer do
    exerciseCmd oid1 CancelOrder

--customer attempts to order negative amount 
  submitMustFail customer do
    createCmd Order with
      customer
      supplier = ultaSupplier
      orderId = "InvalidOrder"
      productsOrdered = [("UltaP123", -1)]

-- attempting to update product price to a negative value
  submitMustFail ultaSupplier do
    exerciseCmd newUltaProd1 UpdatePrice with newPrice = -10.0

-- attempting to reduce the product stock to a negative level
  submitMustFail ultaSupplier do
    exerciseCmd newUltaProd1 UpdateStock with stockChange = -200

-- Sephora attempts to accept an order that has been cancelled
  submitMustFail sephoraSupplier do
    exerciseCmd oid2 AcceptOrder

  --Test that an order cannot be accepted if it requires more stock than is available.
  pid1 <- submit ultaSupplier do
    createCmd Inventory.Product with
      -- manufacturer = manufacturer
      supplier = ultaSupplier
      productInfo = ProductInfo with 
        productId = "UltaP345"
        productName = "Ulta Primer"
        quantity = 50
        price = 100.0
  _ <- submit ultaSupplier do 
    exerciseCmd pid1 UpdateStock with stockChange = -50  -- Reducing stock
  oid4 <- submit customer do 
    createCmd Order with 
      customer
      supplier = ultaSupplier
      orderId = "Order004"
      productsOrdered = [("UltaP345", 1)]
  _ <- submitMustFail ultaSupplier do 
    exerciseCmd oid4 AcceptOrder
    --Test where Ulta supplier attempts to accept the Sephora order
  oid5 <- submit customer do
    createCmd Order with
      customer
      supplier = sephoraSupplier
      orderId = "Order005" 
      productsOrdered = [("SephoraP456", 2)]  

  submitMustFail ultaSupplier do
    exerciseCmd oid5 AcceptOrder

  return ()
