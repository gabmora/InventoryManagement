module Inventory where

import DA.Foldable (forA_)

template Product
  with
    -- manufacturer: Party
    supplier: Party
    productId: Text
    productName: Text
    quantity: Int
    price: Decimal
  where
    signatory supplier
    -- observer supplier
    key (supplier, productId) : (Party, Text)
    maintainer key._1 -- the supplier is the maintainer of the key
    ensure quantity >= 0 

    choice UpdateStock: ContractId Product
      with
        stockChange: Int  -- Positive to add stock, negative to subtract
      controller supplier
      do
        let newQuantity = quantity + stockChange
        assertMsg "Stock level cannot be negative" (newQuantity >= 0)
        create this with quantity = newQuantity

    nonconsuming choice UpdatePrice: Optional (ContractId Product)
      with
        newPrice: Decimal
      controller supplier
      do
        archive self
        -- create this with price = newPrice
        if newPrice /= price
          then Some <$> create this with price = newPrice
          else return None



template Order
  with
    customer: Party
    supplier: Party
    orderId: Text
    productsOrdered: [(Text, Int)] 
    -- orderTotal: Decimal
  where
    signatory customer
    observer supplier

    ensure all (\(_, qty) -> qty > 0) productsOrdered  -- Ensure total order amount is positive

    choice PlaceOrder: ContractId Order
      controller customer
      do
        -- totalPrice <- calculateTotalOrderPrice productsOrdered
        create this with 
          customer
          supplier
          orderId
          productsOrdered

    choice AcceptOrder: ()
      controller supplier
      do
        -- Iterate over each ordered product and update its quantity
        forA_ productsOrdered $ \(prodId, qty) -> do
          let productKey = (supplier, prodId) : (Party, Text)
          (productContractId, product) <- fetchByKey @Product productKey
          if product.quantity >= qty
            then do
              let newQuanity =  product.quantity - qty
              exercise productContractId UpdateStock with stockChange = -qty
              create Product with
                -- manufacturer = product.manufacturer
                supplier = supplier
                productId = prodId
                productName = product.productName
                quantity = product.quantity - qty
                price = product.price
            else
              error "Insufficient stock for product"

    nonconsuming choice CancelOrder: ()
      controller customer
      do
        archive self 

