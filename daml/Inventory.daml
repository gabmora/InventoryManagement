module Inventory where

import DA.Foldable (forA_)

template Product
  with
    manufacturer: Party
    productId: Text
    productName: Text
    quantity: Int
    price: Decimal
  where
    signatory manufacturer
    key (manufacturer, productId) : (Party, Text)
    maintainer key._1 -- the manufacturer is the maintainer of the key
    ensure quantity >= 0 

    choice UpdateStock: ContractId Product
      with
        stockChange: Int  -- Positive to add stock, negative to subtract
      controller manufacturer
      do
        let newQuantity = quantity + stockChange
        assertMsg "Stock level cannot be negative" (newQuantity >= 0)
        create this with quantity = newQuantity

    nonconsuming choice UpdatePrice: Optional (ContractId Product)
      with
        newPrice: Decimal
      controller manufacturer
      do
        archive self
        -- create this with price = newPrice
        if newPrice /= price
          then Some <$> create this with price = newPrice
          else return None


template Order
  with
    customer: Party
    manufacturer: Party
    orderId: Text
    productsOrdered: [(Text, Int)] -- List of product IDs and quantity
    orderTotal: Decimal
  where
    signatory customer
    observer manufacturer

    ensure all (\(_, qty) -> qty > 0) productsOrdered  && orderTotal > 0.0  -- Ensure total order amount is positive

    choice PlaceOrder: ContractId Order
      controller customer
      do
        create this with orderTotal = orderTotal


    choice AcceptOrder: ()
      controller manufacturer
      do
        -- Iterate over each ordered product and update its quantity
        forA_ productsOrdered $ \(prodId, qty) -> do
          let productKey = (manufacturer, prodId)
          (productContractId, product) <- fetchByKey @Product productKey
          assertMsg "Product does not belong to the manufacturer" (product.manufacturer == manufacturer)
          archive productContractId
          create Product with
            manufacturer = manufacturer
            productId = prodId
            productName = product.productName
            quantity = product.quantity - qty
            price = product.price
        -- create this with orderTotal = orderTotal

    nonconsuming choice CancelOrder: ()
      controller customer
      do
        archive self 

